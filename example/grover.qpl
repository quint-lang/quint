func groverDiffusion<n>(cand: uint<n>) -> void {
    H(cand);
    if (cand != 0) {
        phase(pi);
    }
    H(cand);
}


func groverSearch<n>(f: (uint<n>)=> bool<1>) -> int {
    let iterations = round(pi / 4 * sqrt(2));
    let cand: uint<n> = 0;

    H(cand);

    for (i : range(iterations)) {
        if (f(cand)) {
            phase(pi);
        }

        groverDiffusion(cand);
    }

    return measure(cand);
}

func main() {
    let array = [2, 3, 2, 6, 5, 2, 7, 3];
    let f = lambda(x: uint<3>) -> bool<1> {
        let aux: uint<3>;
        for (x : range(array.length)) {
            if x == i {
                aux = array[i];
            }
        }
        return aux == 2;
    }
    let res = [0, 0, 0, 0, 0, 0, 0, 0];
    for (i : range(1000)) {
        let x = groverSearch(f);
        res[x] += 1;
    }
    print(res);
}